name: Build/release

on:
  push:
    tags: # 当我们提交代码为tag 是以'v'开头的时候才会触发自动部署到服务端 如 git push tag v0.1.0
      - 'v*'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    env:
        APP_NAME: tts-now # electron.build productName对应
        APP_VERSION: 0.8.0  # 当前版本，需和package verson对应
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2
      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v2
        with:
          node-version: '14.2.0'
      - name: Restore Npm Cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        working-directory: ./
        run: |
          npm install
      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        with:
          build_script_name: dist
          # GitHub token, automatically provided to the action
          # (No need to define this secret in the repo settings)
          github_token: ${{ secrets.github_token }}
          args: --config electron.builder.js
          # If the commit is tagged with a version (e.g. "v1.0.0"),
          # release the app after building
          release: false
      - name: Release MacOs
        uses: softprops/action-gh-release@v1
        if: startsWith(matrix.os, 'macos')
        with:
          files: |
            build/binary/${{env.APP_NAME}}-${{env.APP_VERSION}}.dmg
      - name: Release Windows
        uses: softprops/action-gh-release@v1
        if: startsWith(matrix.os, 'windows')
        with:
          files: |
            build/binary/${{env.APP_NAME}} Setup ${{env.APP_VERSION}}.exe
      - name: Release Ubuntu
        uses: softprops/action-gh-release@v1
        if: startsWith(matrix.os, 'ubuntu')
        with:
          files: |
            build/binary/${{env.APP_NAME}}-${{env.APP_VERSION}}.zip