name: release

on:
  push:
    tags:
      - '*'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
jobs:
  # job's id
  release:

    # job's name
    name: build and release app

    # the type of machine to run the job on
    runs-on: ${{ matrix.os }}

    # create a build matrix for jobs
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    # create steps
    steps:

      # step1: check out repository
      - name: Check out Git repository
        uses: actions/checkout@v2

      # step2: install node env
      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14.17.5'

      # step3: restore npm cache
      - name: Restore Npm Cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # step4: install dependencies     
      - name: Install Dependencies
        working-directory: ./
        run: |
          npm install

      # setp5: build app
      - name: Build app
        uses: samuelmeuli/action-electron-builder@v1
        with:
          build_script_name: dist
          # GitHub token, automatically provided to the action
          # (No need to define this secret in the repo settings)
          github_token: ${{ secrets.github_token }}
          args: --config electron.builder.js
          # If the commit is tagged with a version (e.g. "v1.0.0"),
          # release the app after building
          release: false

      # step6: cleanup artifacts in binary
      - name:  cleanup artifacts for macos
        if: startsWith(matrix.os, 'macos')
        run: |
          npx rimraf "build/binary/!(*.dmg)"
      - name: leanup artifacts for windows
        if: startsWith(matrix.os, 'windows')
        run: |
          npx rimraf "build/binary/!(*.exe)"
      - name:  cleanup artifacts for linux
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          npx rimraf "build/binary/!(*.AppImage)"

      - name: build changelog
        id: build_changelog
        if: startsWith(github.ref, 'refs/tags/')
        uses: mikepenz/release-changelog-builder-action@v2.9.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          configuration: ".config/changelog_configuration.json"
          ignorePreReleases: "false"

      # step7: create release
      - name: release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          body: ${{steps.build_changelog.outputs.changelog}}
          files: "build/binary/**"
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}

  jishida-push:
    runs-on: ubuntu-latest
    needs: [release]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: JiShiDa Push
        uses: funnyzak/jishida-action@master
        with:
          key: ${{secrets.JPUSH_KEY}}
          head: ${{github.repository}}已完成发布
          body: 来自GithubAction：${{github.repository}} 发布已完成，下载地址：https://github.com/funnyzak/tts-now/releases。
